<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">

<generatorConfiguration>
    <!-- 
        context:生成一组对象的环境 
        id:必选，上下文id，用于在生成错误时提示
        defaultModelType:指定生成对象的样式
            1.conditional:类似hierarchical
            2.flat:所有内容（主键，blob）等全部生成在一个对象中
            3.hierarchical:主键生成一个XXKey对象(key class)，Blob等单独生成一个对象，其他简单属性在一个对象中(record class)
        targetRuntime:
            1.MyBatis3:默认的值，生成基于MyBatis3.x以上版本的内容，包括XXXBySample
            2.MyBatis3Simple:类似MyBatis3，只是不生成XXXBySample
        introspectedColumnImpl：类全限定名，用于扩展MBG-->
    <context id="Mysql" targetRuntime="MyBatis3Simple">
        <!-- 自动识别数据库关键字，默认false，如果设置为true，根据SqlReservedWords中定义的关键字列表
        一般保留默认值，遇到数据库关键字（Java关键字），使用columnOverride覆盖-->
        <property name="autoDelimitKeywords" value="false" />
        <!--生成的Java文件的编码-->
        <property name="javaFileEncoding" value="UTF-8" />
        <!-- beginningDelimiter和endingDelimiter：
            指明数据库的用于标记数据库对象名的符号，比如ORACLE就是双引号，MYSQL默认是`反引号-->
        <property name="beginningDelimiter" value="`" />
        <property name="endingDelimiter" value="`" />
        <!--格式化java代码-->
        <property name="javaFormatter" value="org.mybatis.generator.api.dom.DefaultJavaFormatter" />
        <!--格式化XML代码-->
        <property name="xmlFormatter" value="org.mybatis.generator.api.dom.DefaultXmlFormatter" />
        <!--生成带有fluent风格的model代码-->
        <plugin type="org.mybatis.generator.plugins.FluentBuilderMethodsPlugin" />
        <!--生成带有toString的model代码-->
        <plugin type="org.mybatis.generator.plugins.ToStringPlugin" />
        <!--生成的实体类实现序列化接口-->
        <plugin type="org.mybatis.generator.plugins.SerializablePlugin" />
        <!--可以生成一个selectByExample方法用来实现分页-->
        <plugin type="org.mybatis.generator.plugins.RowBoundsPlugin" />

<!--        <commentGenerator>-->
            <!--是否去除自动生成的注释 true:是 false:否  -->
<!--            <property name="suppressAllComments" value="true" />-->
            <!-- 注释里不添加日期 -->
<!--            <property name="suppressDate" value="true" />-->
<!--        </commentGenerator>-->

        <!-- 自定义注释生成器 -->
        <commentGenerator type="com.dongx.accountbook.note.support.MySQLCommentGenerator">
            <property name="author" value="Dongx"/>
            <property name="dateFormat" value="yyyy-MM-dd HH:mm:SS"/>
        </commentGenerator>
        
        <!--数据库连接的信息：驱动类、连接地址、用户名、密码 -->
        <jdbcConnection driverClass="com.mysql.cj.jdbc.Driver"
                        connectionURL="jdbc:mysql://localhost:3306/tenancy?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=Hongkong&amp;tinyInt1isBit=false&amp;useSSL=false"
                        userId="root"
                        password="root">
            <!-- 设置 useInformationSchema 属性为 true -->
            <property name="useInformationSchema" value="true" />
        </jdbcConnection>

        <!--默认false，把jdbc decimal 和 numeric 类型解析为 Integer
             true时把jdbc decimal 和 numeric 类型解析为java.math.BigDecimal -->
        <javaTypeResolver type="org.mybatis.generator.internal.types.JavaTypeResolverDefaultImpl">
            <property name="forceBigDecimals" value="true" />
        </javaTypeResolver>

        <!--targetProject:生成PO实体类的位置 -->
        <javaModelGenerator targetPackage="com.dongx.accountbook.note.model"
                            targetProject="src/main/java">
            <!--for MyBatis3 / MyBatis3Simple 
                    自动为每一个生成的类创建一个构造方法，构造方法包含了所有的field
                    而不是使用setter-->
            <property name="constructorBased" value="false" />
            <!--enableSubPackages:是否让schema作为包的后缀-->
            <property name="enableSubPackages" value="true" />

            <!--for MyBatis3 / MyBatis3Simple
                是否创建一个不可变的类，如果为true
                那么MBG会创建一个没有setter方法的类，取而代之的是类似constructorBased的类-->
            <property name="immutable" value="false" />

            <!--从数据库返回的值是否清理前后的空格-->
            <property name="trimStrings" value="false" />
        </javaModelGenerator>

        <!--targetProject:mapper.xml映射文件生成的位置-->
        <sqlMapGenerator targetPackage="mapper"
                         targetProject="src/main/resources">
            <!--enableSubPackages:是否让schema作为包的后缀-->
            <property name="enableSubPackages" value="true" />
        </sqlMapGenerator>

        <!--targetPackage：mapper接口生成的位置 
            type：选择怎么生成mapper接口（在MyBatis3/MyBatis3Simple下）：
            1.ANNOTATEDMAPPER：会生成使用Mapper接口+Annotation的方式创建（SQL生成在annotation中），不会生成对应的XML
            2.MIXEDMAPPER：使用混合配置，会生成Mapper接口，并适当添加合适的Annotation，但是XML会生成在XML中
            3.XMLMAPPER：会生成Mapper接口，接口完全依赖XML
            注意，如果context是MyBatis3Simple：只支持ANNOTATEDMAPPER和XMLMAPPER-->
        <javaClientGenerator type="ANNOTATEDMAPPER"
                             targetPackage="com.dongx.accountbook.note.mapper"
                             targetProject="src/main/java">
            <!-- enableSubPackages:是否让schema作为包的后缀 -->
            <property name="enableSubPackages" value="true" />
        </javaClientGenerator>

        <!--选择一个table来生成相关文件，可以有一个或多个table，必须要有table元素
            选择的table会生成一下文件：
                1.SQL map文件
                2.生成一个主键类
                3.除了BLOB和主键的其他字段的类
                4.包含BLOB的类
                5.一个用户生成动态查询的条件类（selectByExample, deleteByExample），可选
                6.Mapper接口（可选）
    
            tableName（必要）：要生成对象的表名
            注意：大小写敏感问题。正常情况下，MBG会自动的去识别数据库标识符的大小写敏感度，在一般情况下，MBG会
                根据设置的schema，catalog或tablename去查询数据表，按照下面的流程：
                1.如果schema，catalog或tablename中有空格，那么设置的是什么格式，就精确的使用指定的大小写格式去查询
                2.否则，如果数据库的标识符使用大写的，那么MBG自动把表名变成大写再查找
                3.否则，如果数据库的标识符使用小写的，那么MBG自动把表名变成小写再查找
                4.否则，使用指定的大小写格式查询
            另外的，如果在创建表的时候，使用的""把数据库对象规定大小写，就算数据库标识符是使用的大写，在这种情况下也会使用给定的大小写来创建表名
            这个时候，请设置delimitIdentifiers="true"即可保留大小写格式
    
            可选：
            1.schema：数据库的schema
            2.catalog：数据库的catalog
            3.alias：为数据表设置的别名，如果设置了alias，那么生成的所有的SELECT SQL语句中，列名会变成：alias_actualColumnName
            4.domainObjectName：生成的domain类的名字，如果不设置，直接使用表名作为domain类的名字可以设置为somepck.domainName，那么会自动把domainName类再放到somepck包里面
            5.enableInsert（默认true）：指定是否生成insert语句
            6.enableSelectByPrimaryKey（默认true）：指定是否生成按照主键查询对象的语句（就是getById或get）
            7.enableSelectByExample（默认true）：MyBatis3Simple为false，指定是否生成动态查询语句
            8.enableUpdateByPrimaryKey（默认true）：指定是否生成按照主键修改对象的语句（即update)
            9.enableDeleteByPrimaryKey（默认true）：指定是否生成按照主键删除对象的语句（即delete）
            10.enableDeleteByExample（默认true）：MyBatis3Simple为false，指定是否生成动态删除语句
            11.enableCountByExample（默认true）：MyBatis3Simple为false，指定是否生成动态查询总条数语句（用于分页的总条数查询）
            12.enableUpdateByExample（默认true）：MyBatis3Simple为false，指定是否生成动态修改语句（只修改对象中不为空的属性）
            13.modelType：参考context元素的defaultModelType，相当于覆盖
            14.delimitIdentifiers：参考tableName的解释，注意，默认的delimitIdentifiers是双引号，如果类似MYSQL这样的数据库，使用的是`（反引号，那么还需要设置context的beginningDelimiter和endingDelimiter属性）
            15.delimitAllColumns：设置是否所有生成的SQL中的列名都使用标识符引起来。默认为false，delimitIdentifiers参考context的属性
    
            注意:table里面很多参数都是对javaModelGenerator，context等元素的默认属性的一个复写-->
        <table tableName="multi_tenancy" domainObjectName="MultiTenancy">
            <!-- 如果设置为true，生成的model类会直接使用column本身的名字，而不会再使用驼峰命名方法-->
            <property name="useActualColumnNames" value="false" />

            <!-- generatedKey用于生成生成主键的方法，
               如果设置了该元素，MBG会在生成的<insert>元素中生成一条正确的<selectKey>元素，该元素可选
               column:主键的列名；
               sqlStatement：要生成的selectKey语句，有以下可选项：
                   Cloudscape: 相当于selectKey的SQL为: VALUES IDENTITY_VAL_LOCAL()
                   DB2: 相当于selectKey的SQL为: VALUES IDENTITY_VAL_LOCAL()
                   DB2_MF: 相当于selectKey的SQL为: SELECT IDENTITY_VAL_LOCAL() FROM SYSIBM.SYSDUMMY1
                   Derby: 相当于selectKey的SQL为: VALUES IDENTITY_VAL_LOCAL()
                   HSQLDB: 相当于selectKey的SQL为: CALL IDENTITY()
                   Informix: 相当于selectKey的SQL为: select dbinfo('sqlca.sqlerrd1') from systables where tabid=1
                   MySql: 相当于selectKey的SQL为: SELECT LAST_INSERT_ID()
                   SqlServer: 相当于selectKey的SQL为: SELECT SCOPE_IDENTITY()
                   SYBASE: 相当于selectKey的SQL为: SELECT @@IDENTITY
                   JDBC: 相当于在生成的insert元素上添加useGeneratedKeys="true"和keyProperty属性-->
            <generatedKey column="id" sqlStatement="CALL IDENTITY()" identity="true" />

            <!--用来修改表中某个列的属性，MBG会使用修改后的列来生成domain的属性
                   column:要重新设置的列名
                   注意：一个table元素中可以有多个columnOverride元素-->
            <!--<columnOverride column="price" javaType="org.joda.money.Money" jdbcType="BIGINT"
                typeHandler="geektime.spring.data.mybatis.handler.MoneyTypeHandler"/>-->
        </table>
    </context>
</generatorConfiguration>